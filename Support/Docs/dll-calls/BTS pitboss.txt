int CvActionInfo::getHotKeyPriority(void)
int CvActionInfo::getHotKeyPriorityAlt(void)
int CvActionInfo::getHotKeyVal(void)
int CvActionInfo::getHotKeyValAlt(void)
enum ActionSubTypes CvActionInfo::getSubType(void)
bool CvActionInfo::isAltDown(void)
bool CvActionInfo::isAltDownAlt(void)
bool CvActionInfo::isCtrlDown(void)
bool CvActionInfo::isCtrlDownAlt(void)
bool CvActionInfo::isShiftDown(void)
bool CvActionInfo::isShiftDownAlt(void)
bool CvActionInfo::isVisible(void)
int CvAnimationCategoryInfo::getCategoryBaseID(void)
int CvAnimationCategoryInfo::getCategoryDefaultTo(void)
int CvAnimationPathInfo::getNumPathDefinitions(void)
class std::vector<struct std::pair<int,float>,class std::allocator<struct std::pair<int,float> > > * CvAnimationPathInfo::getPath(void)
int CvAnimationPathInfo::getPathCategory(int)
bool CvAnimationPathInfo::isMissionPath(void)
void CvArtFileMgr::buildArtFileInfoMaps(void)
void CvArtFileMgr::DeInit(void)
class CvArtFileMgr & CvArtFileMgr::GetInstance(void)
class CvArtInfoInterface * CvArtFileMgr::getInterfaceArtInfo(char const *)
class CvArtInfoMisc * CvArtFileMgr::getMiscArtInfo(char const *)
class CvArtInfoTerrain * CvArtFileMgr::getTerrainArtInfo(char const *)
void CvArtFileMgr::Init(void)
void CvArtFileMgr::Reset(void)
char const * CvArtInfoAsset::getKFM(void)
char const * CvArtInfoAsset::getNIF(void)
char const * CvArtInfoBonus::getShaderNIF(void)
char const * CvArtInfoBuilding::getLSystemName(void)
enum LightTypes CvArtInfoFeature::getLightType(void)
int CvArtInfoFeature::getNumVarieties(void)
enum TileArtTypes CvArtInfoFeature::getTileArtType(void)
class CvArtInfoFeature::FeatureVariety const & CvArtInfoFeature::getVariety(int)
bool CvArtInfoFeature::isAnimated(void)
bool CvArtInfoFeature::isRiverArt(void)
char const * CvArtInfoImprovement::getShaderNIF(void)
char const * CvArtInfoLeaderhead::getBackgroundKFM(void)
char const * CvArtInfoLeaderhead::getNoShaderNIF(void)
char const * CvArtInfoTerrain::getBaseTexture(void)
class std::vector<struct std::pair<int,int>,class std::allocator<struct std::pair<int,int> > > & CvArtInfoTerrain::getBlendList(int)
char const * CvArtInfoTerrain::getDetailTexture(void)
char const * CvArtInfoTerrain::getGridTexture(void)
int CvArtInfoTerrain::getLayerOrder(void)
bool CvArtInfoTerrain::useAlphaShader(void)
float CvArtInfoUnit::getBankRate(void)
int CvArtInfoUnit::getDamageStates(void)
char const * CvArtInfoUnit::getShadowAttachNode(void)
char const * CvArtInfoUnit::getShadowNIF(void)
float CvArtInfoUnit::getShadowScale(void)
char const * CvAssetInfoBase::getPath(void)
char const * CvAttachableInfo::getPath(void)
bool CvBattleDefinition::isAdvanceSquare(void)
class CvArtInfoBonus const * CvBonusInfo::getArtInfo(void)
int CvBuildInfo::getEntityEvent(void)
int CvBuildInfo::getMissionType(void)
char const * CvCameraOverlayInfo::getBaseTexture(void)
enum CameraOverlayTypes CvCameraOverlayInfo::getCameraOverlayType(void)
bool CvCameraOverlayInfo::isVisible(void)
void CvCity::cheat(bool,bool,bool)
enum ArtStyleTypes CvCity::getArtStyleType(void)
class CvArtInfoBuilding const * CvCity::getBuildingArtInfo(enum BuildingTypes)
float CvCity::getBuildingVisibilityPriority(enum BuildingTypes)
int CvCity::getID(void)
struct IDInfo CvCity::getIDInfo(void)
class CvWString const CvCity::getName(unsigned int)
unsigned short const * CvCity::getNameKey(void)
int CvCity::getNumOrdersQueued(void)
struct OrderData CvCity::getOrderData(int)
enum PlayerTypes CvCity::getOwner(void)
int CvCity::getSoundscapeScriptId(void)
enum TeamTypes CvCity::getTeam(void)
void CvCity::getVisibleBuildings(class std::list<enum BuildingTypes,class std::allocator<enum BuildingTypes> > &,int &)
int CvCity::getX(void)
int CvCity::getY(void)
bool CvCity::isInfoDirty(void)
class CvPlot * CvCity::plot(void)
void CvCity::setInfoDirty(bool)
void CvCity::setLayoutDirty(bool)
void CvCity::updateSelectedCity(bool)
unsigned short const * CvCivilizationInfo::getAdjective(unsigned int)
int CvCivilizationInfo::getDefaultPlayerColor(void)
unsigned short const * CvCivilizationInfo::getShortDescription(unsigned int)
bool CvCivilizationInfo::isAIPlayable(void)
bool CvCivilizationInfo::isLeaders(int)
bool CvCivilizationInfo::isPlayable(void)
class NiColorA const & CvColorInfo::getColor(void)
char const * CvCursorInfo::getPath(void)
enum PlayerTypes CvDeal::getFirstPlayer(void)
enum TradeableItems CvDeal::getGoldItem(void)
enum TradeableItems CvDeal::getGoldPerTurnItem(void)
int CvDeal::getID(void)
enum TradeableItems CvDeal::getPeaceItem(void)
enum PlayerTypes CvDeal::getSecondPlayer(void)
bool CvDeal::hasData(enum TradeableItems)
class CLLNode<struct TradeData> * CvDeal::headFirstTradesNode(void)
class CLLNode<struct TradeData> * CvDeal::headSecondTradesNode(void)
bool CvDeal::isCancelable(enum PlayerTypes,class CvWString *)
bool CvDeal::isDual(enum TradeableItems,bool)
bool CvDeal::isEndWar(enum TradeableItems)
bool CvDeal::isGold(enum TradeableItems)
bool CvDeal::isVassalTributeDeal(class CLinkList<struct TradeData> const *)
void CvDeal::kill(bool)
class CLLNode<struct TradeData> * CvDeal::nextFirstTradesNode(class CLLNode<struct TradeData> *)
class CLLNode<struct TradeData> * CvDeal::nextSecondTradesNode(class CLLNode<struct TradeData> *)
CvDiploParameters::CvDiploParameters(enum PlayerTypes)
bool CvDiploParameters::getAIContact(void)
unsigned short const * CvDiploParameters::getChatText(void)
int CvDiploParameters::getData(void)
enum DiploCommentTypes CvDiploParameters::getDiploComment(void)
bool CvDiploParameters::getHumanDiplo(void)
bool CvDiploParameters::getOurOffering(void)
class CLinkList<struct TradeData> const & CvDiploParameters::getOurOfferList(void)
bool CvDiploParameters::getPendingDelete(void)
bool CvDiploParameters::getRenegotiate(void)
bool CvDiploParameters::getTheirOffering(void)
class CLinkList<struct TradeData> const & CvDiploParameters::getTheirOfferList(void)
enum PlayerTypes CvDiploParameters::getWhoTalkingTo(void)
void CvDiploParameters::read(class FDataStreamBase &)
void CvDiploParameters::setChatText(unsigned short const *)
void CvDiploParameters::setHumanDiplo(bool)
void CvDiploParameters::setOurOffering(bool)
void CvDiploParameters::setOurOfferList(class CLinkList<struct TradeData> const &)
void CvDiploParameters::setPendingDelete(bool)
void CvDiploParameters::setTheirOffering(bool)
void CvDiploParameters::setTheirOfferList(class CLinkList<struct TradeData> const &)
void CvDiploParameters::setWhoTalkingTo(enum PlayerTypes)
void CvDiploParameters::write(class FDataStreamBase &)
void CvDLLButtonPopup::freeInstance(void)
class CvDLLButtonPopup & CvDLLButtonPopup::getInstance(void)
bool CvDLLButtonPopup::launchButtonPopup(class CvPopup *,class CvPopupInfo &)
bool CvDLLEntity::IsSelected(void)
void CvDllTranslator::initializeTags(class CvWString &,class CvWString &,class CvWString &,class CvWString &,class CvWString &,class CvWString &,class CvWString &,class std::map<class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> >,class CvWString,struct std::less<class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > >,class std::allocator<struct std::pair<class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const ,class CvWString> > > &,class std::map<class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> >,class CvWString,struct std::less<class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > >,class std::allocator<struct std::pair<class std::basic_string<unsigned short,struct std::char_traits<
bool CvDllTranslator::replaceCt(class CvWString const &,int,class CvWString &)
bool CvDllTranslator::replaceOur(class CvWString const &,int,class CvWString &)
void CvDLLWidgetData::freeInstance(void)
class CvDLLWidgetData & CvDLLWidgetData::getInstance(void)
void CvDLLWidgetData::parseHelp(class CvWStringBuffer &,struct CvWidgetDataStruct &)
void CvEventReporter::chat(class CvWString)
void CvEventReporter::gameStart(void)
void CvEventReporter::getGameStatistics(class std::vector<struct CvStatBase *,class std::allocator<struct CvStatBase *> > &)
class CvEventReporter & CvEventReporter::getInstance(void)
void CvEventReporter::getPlayerStatistics(enum PlayerTypes,class std::vector<struct CvStatBase *,class std::allocator<struct CvStatBase *> > &)
void CvEventReporter::gotoPlotSet(class CvPlot *,enum PlayerTypes)
void CvEventReporter::init(void)
bool CvEventReporter::kbdEvent(int,int,int,int)
void CvEventReporter::newGame(void)
void CvEventReporter::newPlayer(enum PlayerTypes)
void CvEventReporter::preSave(void)
void CvEventReporter::readStatistics(class FDataStreamBase *)
void CvEventReporter::resetStatistics(void)
void CvEventReporter::unInit(void)
void CvEventReporter::unitSelected(class CvUnit *)
void CvEventReporter::update(float)
void CvEventReporter::windowActivation(bool)
void CvEventReporter::writeStatistics(class FDataStreamBase *)
class CvArtInfoFeature const * CvFeatureInfo::getArtInfo(void)
CvFlyoutMenuData::~CvFlyoutMenuData(void)
CvFractal::CvFractal(void)
void CvFractal::fracInit(int,int,int,class CvRandom &,int,class CvFractal *,int,int)
void CvFractal::fracInitHinted(int,int,int,class CvRandom &,unsigned char *,int,int,class CvFractal *,int,int)
int CvFractal::getHeight(int,int)
int CvFractal::getHeightFromPercent(int)
void CvGame::applyFlyoutMenu(struct CvFlyoutMenuData const &)
int CvGame::calculateOptionsChecksum(void)
int CvGame::calculateSyncChecksum(void)
bool CvGame::canDoPing(class CvPlot *,enum PlayerTypes)
bool CvGame::canHandleAction(int,class CvPlot *,bool,bool)
void CvGame::cheatSpaceship(void)
int CvGame::countNumHumanGameTurnActive(void)
void CvGame::cycleCities(bool,bool)
enum PlayerTypes CvGame::getActivePlayer(void)
enum TeamTypes CvGame::getActiveTeam(void)
class CvDeal * CvGame::getDeal(int)
enum EndTurnButtonStates CvGame::getEndTurnState(void)
enum GameStateTypes CvGame::getGameState(void)
int CvGame::getGameTurn(void)
void CvGame::getGlobeLayers(class std::vector<struct CvGlobeLayerData,class std::allocator<struct CvGlobeLayerData> > &)
bool CvGame::getHotPbemBetweenTurns(void)
int CvGame::getIndexAfterLastDeal(void)
class CvWString const & CvGame::getName(void)
class CvPlot * CvGame::getNewHighlightPlot(void)
int CvGame::getNextSoundtrack(enum EraTypes,int)
int CvGame::getNumHumanPlayers(void)
enum PlayerTypes CvGame::getPausePlayer(void)
int CvGame::getPlayerScore(enum PlayerTypes)
enum ColorTypes CvGame::getPlotHighlightColor(class CvPlot *)
class CvUnit * CvGame::getPlotUnit(class CvPlot const *,int)
void CvGame::getPlotUnits(class CvPlot const *,class std::vector<class CvUnit *,class std::allocator<class CvUnit *> > &)
int CvGame::getSoundtrackSpace(void)
int CvGame::getTeamScore(enum TeamTypes)
int CvGame::getTurnSlice(void)
int CvGame::getTurnSlicesRemaining(void)
void CvGame::handleAction(int)
void CvGame::handleDiplomacySetAIComment(enum DiploCommentTypes)
void CvGame::implementDeal(enum PlayerTypes,enum PlayerTypes,class CLinkList<struct TradeData> *,class CLinkList<struct TradeData> *,bool)
void CvGame::init(enum HandicapTypes)
void CvGame::initDiplomacy(void)
void CvGame::initEvents(void)
void CvGame::initFreeUnits(void)
void CvGame::initScoreCalculation(void)
void CvGame::initSelection(void)
bool CvGame::isDebugMode(void)
bool CvGame::isFinalInitialized(void)
bool CvGame::isGameMultiPlayer(void)
bool CvGame::isHotSeat(void)
bool CvGame::isMPOption(enum MultiplayerOptionTypes)
bool CvGame::isNetworkMultiPlayer(void)
bool CvGame::isOption(enum GameOptionTypes)
bool CvGame::isPaused(void)
bool CvGame::isPbem(void)
bool CvGame::isPitboss(void)
bool CvGame::isSoundtrackOverride(class CvString &)
bool CvGame::isTeamGame(void)
void CvGame::nextActivePlayer(bool)
void CvGame::reset(enum HandicapTypes,bool)
void CvGame::reviveActivePlayer(void)
void CvGame::selectAll(class CvPlot *)
bool CvGame::selectCity(class CvCity *,bool,bool,bool)
void CvGame::selectedCitiesGameNetMessage(int,int,int,int,bool,bool,bool,bool)
void CvGame::selectGroup(class CvUnit *,bool,bool,bool)
void CvGame::selectionListGameNetMessage(int,int,int,int,int,bool,bool)
bool CvGame::selectionListIgnoreBuildingDefense(void)
void CvGame::selectionListMove(class CvPlot *,bool,bool,bool)
void CvGame::selectUnit(class CvUnit *,bool,bool,bool)
void CvGame::setActivePlayer(enum PlayerTypes,bool)
void CvGame::setAIAutoPlay(int)
void CvGame::setFinalInitialized(bool)
void CvGame::setGameState(enum GameStateTypes)
void CvGame::setInitialItems(void)
void CvGame::setInitialTime(unsigned int)
void CvGame::setPausePlayer(enum PlayerTypes)
void CvGame::setPbemTurnSent(bool)
void CvGame::setReplayInfo(class CvReplayInfo *)
void CvGame::setupActionCache(void)
bool CvGame::shouldCenterMinimap(void)
bool CvGame::shouldDisplayEndTurn(void)
bool CvGame::shouldDisplayEndTurnButton(void)
bool CvGame::shouldDisplayFlag(void)
bool CvGame::shouldDisplayReturn(void)
bool CvGame::shouldDisplayUnitModel(void)
bool CvGame::shouldDisplayWaitingOthers(void)
bool CvGame::shouldDisplayWaitingYou(void)
bool CvGame::shouldShowResearchButtons(void)
void CvGame::testExtendedGame(void)
void CvGame::toggleDebugMode(void)
void CvGame::update(void)
void CvGame::updateBlockadedPlots(void)
void CvGame::updateColoredPlots(void)
void CvGame::updateDebugModeCache(void)
void CvGame::updateSelectionList(void)
void CvGame::updateTestEndTurn(void)
bool CvGameOptionInfo::getDefault(void)
bool CvGameOptionInfo::getVisible(void)
CvGameText::CvGameText(void)
int CvGameText::getNumLanguages(void)
void CvGameText::setNumLanguages(int)
void CvGameTextMgr::assignFontIds(int,int)
void CvGameTextMgr::DeInitialize(void)
void CvGameTextMgr::getBonusDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getBuildingDataForWB(bool,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getCityDataForAS(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getCorporationDataForWB(bool,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getFontSymbols(class std::vector<class std::vector<unsigned short,class std::allocator<unsigned short> >,class std::allocator<class std::vector<unsigned short,class std::allocator<unsigned short> > > > &,class std::vector<int,class std::allocator<int> > &)
void CvGameTextMgr::getGlobeLayerName(enum GlobeLayerTypes,int,class CvWString &)
void CvGameTextMgr::getImprovementDataForAS(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getImprovementDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
class CvGameTextMgr & CvGameTextMgr::GetInstance(void)
void CvGameTextMgr::getInterfaceCenterText(class CvWString &)
void CvGameTextMgr::getPlotHelp(class CvPlot *,class CvCity *,class CvPlot *,bool,class CvWStringBuffer &)
void CvGameTextMgr::getPromotionDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getReligionDataForWB(bool,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getTechDataForAS(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getTechDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getTerrainDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &,class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getTerritoryDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getTradeScreenHeader(class CvWString &,enum PlayerTypes,enum PlayerTypes,bool)
void CvGameTextMgr::getTradeScreenIcons(class std::vector<struct std::pair<class CvString,struct CvWidgetDataStruct>,class std::allocator<struct std::pair<class CvString,struct CvWidgetDataStruct> > > &,enum PlayerTypes)
void CvGameTextMgr::getTradeScreenTitleIcon(class CvString &,struct CvWidgetDataStruct &,enum PlayerTypes)
void CvGameTextMgr::getTurnTimerText(class CvWString &)
void CvGameTextMgr::getUnitDataForAS(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getUnitDataForWB(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::getVisibilityDataForAS(class std::vector<struct CvWBData,class std::allocator<struct CvWBData> > &)
void CvGameTextMgr::Initialize(void)
void CvGameTextMgr::parseCivInfos(class CvWStringBuffer &,enum CivilizationTypes,bool,bool)
void CvGameTextMgr::parseLeaderShortTraits(class CvWStringBuffer &,enum LeaderHeadTypes)
void CvGameTextMgr::parseLeaderTraits(class CvWStringBuffer &,enum LeaderHeadTypes,enum CivilizationTypes,bool,bool)
void CvGameTextMgr::Reset(void)
void CvGameTextMgr::setMinimizePopupHelp(class CvWString &,class CvPopupInfo const &)
void CvGameTextMgr::setTimeStr(class CvWString &,int,bool)
void CvGlobals::enableDLLProfiler(bool)
class CvActionInfo & CvGlobals::getActionInfo(int)
int CvGlobals::getActiveLandscapeID(void)
class CvAnimationCategoryInfo & CvGlobals::getAnimationCategoryInfo(enum AnimationCategoryTypes)
class CvAnimationPathInfo & CvGlobals::getAnimationPathInfo(enum AnimationPathTypes)
class FAStar & CvGlobals::getAreaFinder(void)
class CvString & CvGlobals::getArtStyleTypes(enum ArtStyleTypes)
class CvRandom & CvGlobals::getASyncRand(void)
class CvAttachableInfo & CvGlobals::getAttachableInfo(int)
class CvBonusInfo & CvGlobals::getBonusInfo(enum BonusTypes)
class FAStar & CvGlobals::getBorderFinder(void)
class CvBuildInfo & CvGlobals::getBuildInfo(enum BuildTypes)
float CvGlobals::getCAMERA_FAR_CLIP_Z_HEIGHT(void)
float CvGlobals::getCAMERA_LOWER_PITCH(void)
float CvGlobals::getCAMERA_MAX_TRAVEL_DISTANCE(void)
float CvGlobals::getCAMERA_MAX_TURN_OFFSET(void)
float CvGlobals::getCAMERA_MAX_YAW(void)
float CvGlobals::getCAMERA_MIN_DISTANCE(void)
float CvGlobals::getCAMERA_MIN_YAW(void)
float CvGlobals::getCAMERA_SPECIAL_PITCH(void)
float CvGlobals::getCAMERA_START_DISTANCE(void)
float CvGlobals::getCAMERA_UPPER_PITCH(void)
class CvCameraOverlayInfo & CvGlobals::getCameraOverlayInfo(int)
class CvCivilizationInfo & CvGlobals::getCivilizationInfo(enum CivilizationTypes)
class CvClimateInfo & CvGlobals::getClimateInfo(enum ClimateTypes)
class CvColorInfo & CvGlobals::getColorInfo(enum ColorTypes)
class CvCursorInfo & CvGlobals::getCursorInfo(enum CursorTypes)
float CvGlobals::getDefineFLOAT(char const *)
int CvGlobals::getDefineINT(char const *)
char const * CvGlobals::getDefineSTRING(char const *)
class FVariableSystem * CvGlobals::getDefinesVarSystem(void)
class CvDiplomacyScreen * CvGlobals::getDiplomacyScreen(void)
class CvDLLUtilityIFaceBase * CvGlobals::getDLLIFaceNonInl(void)
class CvDropMgr & CvGlobals::getDropMgr(void)
class CvEffectInfo & CvGlobals::getEffectInfo(int)
class CvEraInfo & CvGlobals::getEraInfo(enum EraTypes)
int CvGlobals::getEVENT_MESSAGE_TIME(void)
class CvFeatureInfo & CvGlobals::getFeatureInfo(enum FeatureTypes)
float CvGlobals::getFIELD_OF_VIEW(void)
class FMPIManager * & CvGlobals::getFMPMgrPtr(void)
class CvGameAI & CvGlobals::getGame(void)
class CvGameOptionInfo & CvGlobals::getGameOptionInfo(enum GameOptionTypes)
class CvGameAI * CvGlobals::getGamePointer(void)
class CvGameSpeedInfo & CvGlobals::getGameSpeedInfo(enum GameSpeedTypes)
class CvHandicapInfo & CvGlobals::getHandicapInfo(enum HandicapTypes)
class CMessageQueue & CvGlobals::getHotMessageQueue(void)
class CvImprovementInfo & CvGlobals::getImprovementInfo(enum ImprovementTypes)
int CvGlobals::getInfoTypeForString(char const *,bool)
class CvInitCore & CvGlobals::getIniInitCore(void)
class CvInitCore & CvGlobals::getInitCore(void)
class CvGlobals & CvGlobals::getInstance(void)
class CvInterface & CvGlobals::getInterface(void)
class CvInterfaceModeInfo & CvGlobals::getInterfaceModeInfo(enum InterfaceModeTypes)
class std::vector<class CvInterfaceModeInfo *,class std::allocator<class CvInterfaceModeInfo *> > & CvGlobals::getInterfaceModeInfo(void)
class FAStar & CvGlobals::getInterfacePathFinder(void)
class CvInterface * CvGlobals::getInterfacePtr(void)
class CvLandscapeInfo & CvGlobals::getLandscapeInfo(int)
class CvLeaderHeadInfo & CvGlobals::getLeaderHeadInfo(enum LeaderHeadTypes)
class CvInitCore & CvGlobals::getLoadedInitCore(void)
bool & CvGlobals::getLogging(void)
class CvMainMenuInfo & CvGlobals::getMainMenus(int)
class CvMap & CvGlobals::getMap(void)
int CvGlobals::getMAX_CIV_PLAYERS(void)
int CvGlobals::getMAX_PLOT_LIST_ROWS(void)
int CvGlobals::getMaxCivPlayers(void)
int CvGlobals::getMaxNumSymbols(void)
class CvMessageCodeTranslator & CvGlobals::getMessageCodes(void)
class CMessageControl & CvGlobals::getMessageControl(void)
class CMessageQueue & CvGlobals::getMessageQueue(void)
class CvMissionInfo & CvGlobals::getMissionInfo(enum MissionTypes)
class CMPDiplomacyScreen * CvGlobals::getMPDiplomacyScreen(void)
class CvMPOptionInfo & CvGlobals::getMPOptionInfo(enum MultiplayerOptionTypes)
int CvGlobals::getNUM_ENGINE_DIRTY_BITS(void)
int CvGlobals::getNUM_FORCECONTROL_TYPES(void)
int CvGlobals::getNUM_INTERFACE_DIRTY_BITS(void)
int CvGlobals::getNUM_LEADERANIM_TYPES(void)
int CvGlobals::getNUM_YIELD_TYPES(void)
int CvGlobals::getNumActionInfos(void)
int & CvGlobals::getNumAIPlayableCivilizationInfos(void)
int & CvGlobals::getNumArtStyleTypes(void)
int CvGlobals::getNumBasicItems(void)
int CvGlobals::getNumBonusInfos(void)
int CvGlobals::getNumCameraOverlayInfos(void)
int CvGlobals::getNumCivilizationInfos(void)
int CvGlobals::getNumClimateInfos(void)
int CvGlobals::getNumCursorInfos(void)
int CvGlobals::getNumDirections(void)
int CvGlobals::getNumEraInfos(void)
int CvGlobals::getNumFeatureInfos(void)
int CvGlobals::getNumGameOptions(void)
int CvGlobals::getNumGameSpeedInfos(void)
int CvGlobals::getNumHandicapInfos(void)
int CvGlobals::getNumImprovementInfos(void)
int CvGlobals::getNumLeaderHeadInfos(void)
int CvGlobals::getNumMPOptions(void)
int & CvGlobals::getNumPlayableCivilizationInfos(void)
int CvGlobals::getNumPlayerColorInfos(void)
int CvGlobals::getNumRiverModelInfos(void)
int CvGlobals::getNumRouteInfos(void)
int CvGlobals::getNumRouteModelInfos(void)
int CvGlobals::getNumSeaLevelInfos(void)
int CvGlobals::getNumSpaceShipInfos(void)
int CvGlobals::getNumSpecialOptions(void)
int CvGlobals::getNumTerrainInfos(void)
int CvGlobals::getNumTerrainPlaneInfos(void)
int CvGlobals::getNumThroneRoomInfos(void)
int CvGlobals::getNumThroneRoomStyleInfos(void)
int CvGlobals::getNumTradeableHeadings(void)
int CvGlobals::getNumTradeableItems(void)
int CvGlobals::getNumTurnTimerInfos(void)
int CvGlobals::getNumUnitFormationInfos(void)
int CvGlobals::getNumVictoryInfos(void)
int CvGlobals::getNumWorldInfos(void)
int CvGlobals::getNumWorldPickerInfos(void)
class FAStar & CvGlobals::getPathFinder(void)
class CvPlayerColorInfo & CvGlobals::getPlayerColorInfo(enum PlayerColorTypes)
float CvGlobals::getPLOT_SIZE(void)
int * CvGlobals::getPlotCardinalDirectionX(void)
int * CvGlobals::getPlotCardinalDirectionY(void)
int * CvGlobals::getPlotDirectionX(void)
int * CvGlobals::getPlotDirectionY(void)
class FAStar & CvGlobals::getPlotGroupFinder(void)
class CvPortal & CvGlobals::getPortal(void)
bool & CvGlobals::getRandLogging(void)
class CvRiverModelInfo & CvGlobals::getRiverModelInfo(int)
class FAStar & CvGlobals::getRouteFinder(void)
class CvRouteModelInfo & CvGlobals::getRouteModelInfo(int)
class CvSeaLevelInfo & CvGlobals::getSeaLevelInfo(enum SeaLevelTypes)
class CvSetupData & CvGlobals::getSetupData(void)
float CvGlobals::getSHADOW_SCALE(void)
class CvSlideShowRandomInfo & CvGlobals::getSlideShowRandomInfo(int)
class CvSpaceShipInfo & CvGlobals::getSpaceShipInfo(int)
class CvStatsReporter & CvGlobals::getStatsReporter(void)
class FAStar & CvGlobals::getStepFinder(void)
bool & CvGlobals::getSynchLogging(void)
class CvTerrainInfo & CvGlobals::getTerrainInfo(enum TerrainTypes)
class CvTerrainPlaneInfo & CvGlobals::getTerrainPlaneInfo(int)
class CvThroneRoomCamera & CvGlobals::getThroneRoomCamera(int)
class CvThroneRoomInfo & CvGlobals::getThroneRoomInfo(int)
class CvThroneRoomStyleInfo & CvGlobals::getThroneRoomStyleInfo(int)
class CvTurnTimerInfo & CvGlobals::getTurnTimerInfo(enum TurnTimerTypes)
int CvGlobals::getTypesEnum(char const *)
float CvGlobals::getUNIT_MULTISELECT_DISTANCE(void)
int CvGlobals::getUNIT_MULTISELECT_MAX(void)
class CvUnitFormationInfo & CvGlobals::getUnitFormationInfo(int)
int CvGlobals::getUSE_FINISH_TEXT_CALLBACK(void)
class CvVictoryInfo & CvGlobals::getVictoryInfo(enum VictoryTypes)
class CvWaterPlaneInfo & CvGlobals::getWaterPlaneInfo(int)
class CvWorldInfo & CvGlobals::getWorldInfo(enum WorldSizeTypes)
class CvWorldPickerInfo & CvGlobals::getWorldPickerInfo(int)
enum DirectionTypes CvGlobals::getXYDirection(int,int)
void CvGlobals::infosReset(void)
void CvGlobals::init(void)
bool CvGlobals::IsGraphicsInitialized(void)
bool & CvGlobals::overwriteLogs(void)
bool CvGlobals::readBonusInfoArray(class FDataStreamBase *)
bool CvGlobals::readBuildingInfoArray(class FDataStreamBase *)
bool CvGlobals::readCivicInfoArray(class FDataStreamBase *)
bool CvGlobals::readCivilizationInfoArray(class FDataStreamBase *)
bool CvGlobals::readDiplomacyInfoArray(class FDataStreamBase *)
bool CvGlobals::readEventInfoArray(class FDataStreamBase *)
bool CvGlobals::readEventTriggerInfoArray(class FDataStreamBase *)
bool CvGlobals::readHandicapInfoArray(class FDataStreamBase *)
bool CvGlobals::readImprovementInfoArray(class FDataStreamBase *)
bool CvGlobals::readLeaderHeadInfoArray(class FDataStreamBase *)
bool CvGlobals::readPromotionInfoArray(class FDataStreamBase *)
bool CvGlobals::readTechInfoArray(class FDataStreamBase *)
bool CvGlobals::readUnitInfoArray(class FDataStreamBase *)
void CvGlobals::setActiveLandscapeID(int)
void CvGlobals::setAreaFinder(class FAStar *)
void CvGlobals::setBorderFinder(class FAStar *)
void CvGlobals::setDLLIFace(class CvDLLUtilityIFaceBase *)
void CvGlobals::setDLLProfiler(class FProfiler *)
void CvGlobals::setDropMgr(class CvDropMgr *)
void CvGlobals::SetGraphicsInitialized(bool)
void CvGlobals::setHotJoinMessageQueue(class CMessageQueue *)
void CvGlobals::setInterface(class CvInterface *)
void CvGlobals::setInterfacePathFinder(class FAStar *)
void CvGlobals::setMessageCodeTranslator(class CvMessageCodeTranslator *)
void CvGlobals::setMessageControl(class CMessageControl *)
void CvGlobals::setMessageQueue(class CMessageQueue *)
void CvGlobals::setPathFinder(class FAStar *)
void CvGlobals::setPlotGroupFinder(class FAStar *)
void CvGlobals::setPortal(class CvPortal *)
void CvGlobals::setRouteFinder(class FAStar *)
void CvGlobals::setSetupData(class CvSetupData *)
void CvGlobals::setStatsReport(class CvStatsReporter *)
void CvGlobals::setStepFinder(class FAStar *)
void CvGlobals::uninit(void)
void CvGlobals::writeBonusInfoArray(class FDataStreamBase *)
void CvGlobals::writeBuildingInfoArray(class FDataStreamBase *)
void CvGlobals::writeCivicInfoArray(class FDataStreamBase *)
void CvGlobals::writeCivilizationInfoArray(class FDataStreamBase *)
void CvGlobals::writeDiplomacyInfoArray(class FDataStreamBase *)
void CvGlobals::writeEventInfoArray(class FDataStreamBase *)
void CvGlobals::writeEventTriggerInfoArray(class FDataStreamBase *)
void CvGlobals::writeHandicapInfoArray(class FDataStreamBase *)
void CvGlobals::writeImprovementInfoArray(class FDataStreamBase *)
void CvGlobals::writeLeaderHeadInfoArray(class FDataStreamBase *)
void CvGlobals::writePromotionInfoArray(class FDataStreamBase *)
void CvGlobals::writeTechInfoArray(class FDataStreamBase *)
void CvGlobals::writeUnitInfoArray(class FDataStreamBase *)
CvGlobeLayerData::CvGlobeLayerData(struct CvGlobeLayerData const &)
CvGlobeLayerData::CvGlobeLayerData(enum GlobeLayerTypes)
CvGlobeLayerData::~CvGlobeLayerData(void)
class CvArtInfoImprovement const * CvImprovementInfo::getArtInfo(void)
bool CvImprovementInfo::isGoody(void)
bool CvImprovementInfo::isRequiresRiverSide(void)
unsigned short const * CvInfoBase::getDescription(unsigned int)
unsigned short const * CvInfoBase::getHelp(void)
unsigned short const * CvInfoBase::getTextKeyWide(void)
char const * CvInfoBase::getType(void)
CvInfoBase::~CvInfoBase(void)
void CvInitCore::closeInactiveSlots(void)
enum ArtStyleTypes CvInitCore::getArtStyle(enum PlayerTypes)
enum PlayerTypes CvInitCore::getAvailableSlot(void)
enum CivilizationTypes CvInitCore::getCiv(enum PlayerTypes)
class CvWString const & CvInitCore::getCivAdjective(enum PlayerTypes,unsigned int)
class CvWString const & CvInitCore::getCivAdjectiveKey(enum PlayerTypes)
class CvWString const & CvInitCore::getCivDescription(enum PlayerTypes,unsigned int)
class CvWString const & CvInitCore::getCivDescriptionKey(enum PlayerTypes)
class CvWString const & CvInitCore::getCivPassword(enum PlayerTypes)
class CvWString const & CvInitCore::getCivShortDesc(enum PlayerTypes,unsigned int)
class CvWString const & CvInitCore::getCivShortDescKey(enum PlayerTypes)
class CvWString const & CvInitCore::getClimateKey(class CvWString &)
enum PlayerColorTypes CvInitCore::getColor(enum PlayerTypes)
enum CustomMapOptionTypes CvInitCore::getCustomMapOption(int)
class CvString const & CvInitCore::getEmail(enum PlayerTypes)
class CvWString const & CvInitCore::getEraKey(class CvWString &)
class CvWString const & CvInitCore::getFlagDecal(enum PlayerTypes)
bool CvInitCore::getForceControl(enum ForceControlTypes)
bool CvInitCore::getGameMultiplayer(void)
class CvWString const & CvInitCore::getGameSpeedKey(class CvWString &)
enum HandicapTypes CvInitCore::getHandicap(enum PlayerTypes)
bool CvInitCore::getHotseat(void)
bool CvInitCore::getHuman(enum PlayerTypes)
enum LeaderHeadTypes CvInitCore::getLeader(enum PlayerTypes)
class CvWString const & CvInitCore::getLeaderName(enum PlayerTypes,unsigned int)
class CvWString const & CvInitCore::getLeaderNameKey(enum PlayerTypes)
unsigned int CvInitCore::getMapRandSeed(void)
class CvWString CvInitCore::getMapScriptName(void)
bool CvInitCore::getMinorNationCiv(enum PlayerTypes)
bool CvInitCore::getMPOption(enum MultiplayerOptionTypes)
bool CvInitCore::getMultiplayer(void)
int CvInitCore::getNetID(enum PlayerTypes)
bool CvInitCore::getNewGame(void)
int CvInitCore::getNumDefinedPlayers(void)
bool CvInitCore::getOption(enum GameOptionTypes)
bool CvInitCore::getPbem(void)
bool CvInitCore::getPitboss(void)
int CvInitCore::getPitbossTurnTime(void)
bool CvInitCore::getPlayableCiv(enum PlayerTypes)
class CvString const & CvInitCore::getPythonCheck(enum PlayerTypes)
bool CvInitCore::getReady(enum PlayerTypes)
bool CvInitCore::getSavedGame(void)
class CvWString const & CvInitCore::getSeaLevelKey(class CvWString &)
enum SlotClaim CvInitCore::getSlotClaim(enum PlayerTypes)
enum SlotStatus CvInitCore::getSlotStatus(enum PlayerTypes)
bool CvInitCore::getSlotVacant(enum PlayerTypes)
class CvString const & CvInitCore::getSmtpHost(enum PlayerTypes)
unsigned int CvInitCore::getSyncRandSeed(void)
enum TeamTypes CvInitCore::getTeam(enum PlayerTypes)
enum GameType CvInitCore::getType(void)
bool CvInitCore::getVictory(enum VictoryTypes)
bool CvInitCore::getWBMapScript(void)
bool CvInitCore::getWhiteFlag(enum PlayerTypes)
class CvWString const & CvInitCore::getWorldSizeKey(class CvWString &)
class CvString const & CvInitCore::getXMLCheck(enum PlayerTypes)
void CvInitCore::init(enum GameMode)
void CvInitCore::reassignPlayer(enum PlayerTypes,enum PlayerTypes)
void CvInitCore::reopenInactiveSlots(void)
void CvInitCore::resetAdvancedStartPoints(void)
void CvInitCore::resetGame(class CvInitCore *,bool,bool)
void CvInitCore::resetPlayer(enum PlayerTypes,class CvInitCore *,bool,bool)
void CvInitCore::resetPlayers(class CvInitCore *,bool,bool)
void CvInitCore::resetPlayers(void)
void CvInitCore::setActivePlayer(enum PlayerTypes)
void CvInitCore::setAdminPassword(class CvWString const &,bool)
void CvInitCore::setArtStyle(enum PlayerTypes,enum ArtStyleTypes)
void CvInitCore::setCiv(enum PlayerTypes,enum CivilizationTypes)
void CvInitCore::setCivAdjective(enum PlayerTypes,class CvWString const &)
void CvInitCore::setCivDescription(enum PlayerTypes,class CvWString const &)
void CvInitCore::setCivPassword(enum PlayerTypes,class CvWString const &,bool)
void CvInitCore::setCivShortDesc(enum PlayerTypes,class CvWString const &)
void CvInitCore::setClimate(class CvWString const &)
void CvInitCore::setColor(enum PlayerTypes,enum PlayerColorTypes)
void CvInitCore::setCustomMapOption(int,enum CustomMapOptionTypes)
void CvInitCore::setCustomMapOptions(int,enum CustomMapOptionTypes const *)
void CvInitCore::setEmail(enum PlayerTypes,class CvString const &)
void CvInitCore::setEra(class CvWString const &)
void CvInitCore::setFlagDecal(enum PlayerTypes,class CvWString const &)
void CvInitCore::setForceControl(enum ForceControlTypes,bool)
void CvInitCore::setGameName(class CvWString const &)
void CvInitCore::setGamePassword(class CvWString const &)
void CvInitCore::setGameSpeed(class CvWString const &)
void CvInitCore::setHandicap(enum PlayerTypes,enum HandicapTypes)
void CvInitCore::setLeader(enum PlayerTypes,enum LeaderHeadTypes)
void CvInitCore::setLeaderName(enum PlayerTypes,class CvWString const &)
void CvInitCore::setMapRandSeed(unsigned int)
void CvInitCore::setMapScriptName(class CvWString const &)
void CvInitCore::setMinorNationCiv(enum PlayerTypes,bool)
void CvInitCore::setMode(enum GameMode)
void CvInitCore::setMPOption(enum MultiplayerOptionTypes,bool)
void CvInitCore::setNetID(enum PlayerTypes,int)
void CvInitCore::setOption(enum GameOptionTypes,bool)
void CvInitCore::setPitbossTurnTime(int)
void CvInitCore::setPlayableCiv(enum PlayerTypes,bool)
void CvInitCore::setPythonCheck(enum PlayerTypes,class CvString const &)
void CvInitCore::setReady(enum PlayerTypes,bool)
void CvInitCore::setSeaLevel(class CvWString const &)
void CvInitCore::setSlotClaim(enum PlayerTypes,enum SlotClaim)
void CvInitCore::setSlotStatus(enum PlayerTypes,enum SlotStatus)
void CvInitCore::setSmtpHost(enum PlayerTypes,class CvString const &)
void CvInitCore::setSyncRandSeed(unsigned int)
void CvInitCore::setTeam(enum PlayerTypes,enum TeamTypes)
void CvInitCore::setType(enum GameType)
void CvInitCore::setType(class CvWString const &)
void CvInitCore::setVictories(int,bool const *)
void CvInitCore::setVictory(enum VictoryTypes,bool)
void CvInitCore::setWhiteFlag(enum PlayerTypes,bool)
void CvInitCore::setWorldSize(class CvWString const &)
void CvInitCore::setXMLCheck(enum PlayerTypes,class CvString const &)
int CvInterfaceModeInfo::getCursorIndex(void)
bool CvInterfaceModeInfo::getGotoPlot(void)
int CvInterfaceModeInfo::getMissionType(void)
float CvLandscapeInfo::getHillScale(void)
int CvLandscapeInfo::getHorizontalGameCell(void)
int CvLandscapeInfo::getHorizontalVertCnt(void)
float CvLandscapeInfo::getPeakScale(void)
int CvLandscapeInfo::getPlotsPerCellX(void)
int CvLandscapeInfo::getPlotsPerCellY(void)
int CvLandscapeInfo::getVerticalGameCell(void)
int CvLandscapeInfo::getVerticalVertCnt(void)
int CvLandscapeInfo::getWaterHeight(void)
float CvLandscapeInfo::getZScale(void)
class CvArtInfoLeaderhead const * CvLeaderHeadInfo::getArtInfo(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > CvMainMenuInfo::getScene(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > CvMainMenuInfo::getSceneNoShader(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > CvMainMenuInfo::getSoundtrack(void)
void CvMap::erasePlots(void)
class CvCity * CvMap::findCity(int,int,enum PlayerTypes,enum TeamTypes,bool,bool,enum TeamTypes,enum DirectionTypes,class CvCity *)
int CvMap::getGridHeight(void)
int CvMap::getGridWidth(void)
enum WorldSizeTypes CvMap::getWorldSize(void)
void CvMap::init(struct CvMapInitData *)
bool CvMap::isPlot(int,int)
bool CvMap::isWrapX(void)
bool CvMap::isWrapY(void)
int CvMap::numPlots(void)
class CvPlot * CvMap::plot(int,int)
class CvPlot * CvMap::plotByIndex(int)
float CvMap::plotXToPointX(int)
float CvMap::plotYToPointY(int)
class CvPlot * CvMap::pointToPlot(float,float)
void CvMap::reset(struct CvMapInitData *)
void CvMap::setupGraphical(void)
void CvMap::updateCenterUnit(void)
void CvMap::updateFlagSymbols(void)
void CvMap::updateFog(void)
void CvMap::updateSymbolVisibility(void)
void CvMapGenerator::addBonuses(void)
void CvMapGenerator::addFeatures(void)
void CvMapGenerator::addGameElements(void)
void CvMapGenerator::addGoodies(void)
void CvMapGenerator::addRivers(void)
void CvMapGenerator::eraseBonuses(void)
void CvMapGenerator::eraseFeatures(void)
void CvMapGenerator::eraseGoodies(void)
void CvMapGenerator::eraseRivers(void)
void CvMapGenerator::FreeInstance(void)
void CvMapGenerator::generateRandomMap(void)
class CvMapGenerator & CvMapGenerator::GetInstance(void)
class CvMessageControl & CvMessageControl::getInstance(void)
void CvMessageControl::sendAdvancedStartAction(enum AdvancedStartActionTypes,enum PlayerTypes,int,int,int,bool)
void CvMessageControl::sendChangeWar(enum TeamTypes,bool)
void CvMessageControl::sendJoinGroup(int,int)
class CvMessageData * CvMessageData::createMessage(enum GameMessageTypes)
enum GameMessageTypes CvMessageData::getType(void)
class CvUnit * CvMissionDefinition::getUnit(enum BattleUnitTypes)
enum EntityEventTypes CvMissionInfo::getEntityEvent(void)
bool CvMissionInfo::isTarget(void)
void CvPlayer::addDiplomacy(class CvDiploParameters *)
void CvPlayer::addMessage(class CvTalkingHeadMessage const &)
void CvPlayer::addPopup(class CvPopupInfo *,bool)
void CvPlayer::buildTradeTable(enum PlayerTypes,class CLinkList<struct TradeData> &)
bool CvPlayer::canContact(enum PlayerTypes)
bool CvPlayer::canFound(int,int,bool)
bool CvPlayer::canTradeItem(enum PlayerTypes,struct TradeData,bool)
void CvPlayer::changeGold(int)
void CvPlayer::cheat(bool,bool,bool)
class CvCity * CvPlayer::firstCity(int *,bool)
class CvUnit * CvPlayer::firstUnit(int *,bool)
enum ArtStyleTypes CvPlayer::getArtStyleType(void)
class CvCity * CvPlayer::getCapitalCity(void)
class CvCity * CvPlayer::getCity(int)
unsigned short const * CvPlayer::getCivilizationDescription(unsigned int)
enum CivilizationTypes CvPlayer::getCivilizationType(void)
enum EraTypes CvPlayer::getCurrentEra(void)
class std::list<class CvDiploParameters *,class std::allocator<class CvDiploParameters *> > const & CvPlayer::getDiplomacy(void)
class CvWString CvPlayer::getFlagDecal(void)
class std::list<class CvTalkingHeadMessage,class std::allocator<class CvTalkingHeadMessage> > const & CvPlayer::getGameMessages(void)
void CvPlayer::getGlobeLayerColors(enum GlobeLayerTypes,int,class std::vector<class NiColorA,class std::allocator<class NiColorA> > &,class std::vector<struct CvPlotIndicatorData,class std::allocator<struct CvPlotIndicatorData> > &)
enum HandicapTypes CvPlayer::getHandicapType(void)
bool CvPlayer::getHeadingTradeString(enum PlayerTypes,enum TradeableItems,class CvWString &,class CvString &)
enum PlayerTypes CvPlayer::getID(void)
bool CvPlayer::getItemTradeString(enum PlayerTypes,bool,bool,struct TradeData const &,class CvWString &,class CvString &)
enum LeaderHeadTypes CvPlayer::getLeaderType(void)
unsigned short const * CvPlayer::getName(unsigned int)
unsigned short const * CvPlayer::getNameKey(void)
int CvPlayer::getNetID(void)
int CvPlayer::getNumUnits(void)
class CvString const CvPlayer::getPbemEmailAddress(void)
enum PlayerColorTypes CvPlayer::getPlayerColor(void)
int CvPlayer::getPlayerTextColorB(void)
int CvPlayer::getPlayerTextColorG(void)
int CvPlayer::getPlayerTextColorR(void)
class std::list<class CvPopupInfo *,class std::allocator<class CvPopupInfo *> > const & CvPlayer::getPopups(void)
class CvString const CvPlayer::getSmtpHost(void)
enum TeamTypes CvPlayer::getTeam(void)
enum DenialTypes CvPlayer::getTradeDenial(enum PlayerTypes,struct TradeData)
void CvPlayer::handleDiploEvent(enum DiploEventTypes,enum PlayerTypes,int,int)
bool CvPlayer::hasBusyUnit(void)
void CvPlayer::init(enum PlayerTypes)
bool CvPlayer::isAlive(void)
bool CvPlayer::isBarbarian(void)
bool CvPlayer::isHuman(void)
bool CvPlayer::isOption(enum PlayerOptionTypes)
bool CvPlayer::isPbemNewTurn(void)
bool CvPlayer::isTurnActive(void)
bool CvPlayer::isTurnDone(void)
bool CvPlayer::isWhiteFlag(void)
class CvCity * CvPlayer::nextCity(int *,bool)
class CvUnit * CvPlayer::nextUnit(int *,bool)
class CvDiploParameters * CvPlayer::popFrontDiplomacy(void)
class CvPopupInfo * CvPlayer::popFrontPopup(void)
void CvPlayer::reset(enum PlayerTypes,bool)
void CvPlayer::setEndTurn(bool)
void CvPlayer::setGold(int)
void CvPlayer::setNetID(int)
void CvPlayer::setOption(enum PlayerOptionTypes,bool)
void CvPlayer::setPbemEmailAddress(char const *)
void CvPlayer::setPbemNewTurn(bool)
void CvPlayer::setStartTime(unsigned int)
void CvPlayer::setTurnActive(bool,bool)
void CvPlayer::setTurnActiveForPbem(bool)
void CvPlayer::setupGraphical(void)
void CvPlayer::showSpaceShip(void)
void CvPlayer::updateHuman(void)
void CvPlayer::updateTradeList(enum PlayerTypes,class CLinkList<struct TradeData> &,class CLinkList<struct TradeData> const &,class CLinkList<struct TradeData> const &)
enum DiploCommentTypes CvPlayerAI::AI_getGreeting(enum PlayerTypes)
bool CvPlayerAI::areStaticsInitialized(void)
class CvPlayerAI & CvPlayerAI::getPlayerNonInl(enum PlayerTypes)
int CvPlayerColorInfo::getColorTypePrimary(void)
int CvPlayerColorInfo::getColorTypeSecondary(void)
int CvPlayerRecord::getMinutesPlayed(void)
int CvPlayerRecord::getNumBuildingsBuilt(enum BuildingTypes)
int CvPlayerRecord::getNumCitiesBuilt(void)
int CvPlayerRecord::getNumCitiesRazed(void)
int CvPlayerRecord::getNumGoldenAges(void)
int CvPlayerRecord::getNumUnitsBuilt(int)
int CvPlayerRecord::getNumUnitsKilled(int)
int CvPlayerRecord::getNumUnitsWasKilled(int)
bool CvPlayerRecord::getReligionFounded(enum ReligionTypes)
bool CvPlot::checkLateEra(void)
int CvPlot::getAreaIdForGreatWall(void)
class CvUnit * CvPlot::getCenterUnit(void)
enum FeatureTypes CvPlot::getFeatureType(void)
int CvPlot::getFeatureVariety(void)
enum ImprovementTypes CvPlot::getImprovementType(void)
int CvPlot::getNumVisibleUnits(enum PlayerTypes)
enum PlayerTypes CvPlot::getOwner(void)
class CvCity * CvPlot::getPlotCity(void)
class NiPoint3 CvPlot::getPoint(void)
float CvPlot::getPointX(void)
float CvPlot::getPointY(void)
enum CardinalDirectionTypes CvPlot::getRiverNSDirection(void)
class CvRiver * CvPlot::getRiverSymbol(void)
enum CardinalDirectionTypes CvPlot::getRiverWEDirection(void)
float CvPlot::getSymbolOffsetX(int)
float CvPlot::getSymbolOffsetY(int)
enum TerrainTypes CvPlot::getTerrainType(void)
void CvPlot::getVisibleBonusState(enum BonusTypes &,bool &,bool &)
void CvPlot::getVisibleImprovementState(enum ImprovementTypes &,bool &)
int CvPlot::getX(void)
int CvPlot::getY(void)
int CvPlot::getYield(enum YieldTypes)
class CLLNode<struct IDInfo> * CvPlot::headUnitNode(void)
bool CvPlot::isActiveVisible(bool)
bool CvPlot::isCity(bool,enum TeamTypes)
bool CvPlot::isFighting(void)
bool CvPlot::isHills(void)
bool CvPlot::isIrrigationAvailable(bool)
bool CvPlot::isLake(void)
bool CvPlot::isLayoutDirty(void)
bool CvPlot::isLayoutStateDifferent(void)
bool CvPlot::isNOfRiver(void)
bool CvPlot::isPeak(void)
bool CvPlot::isRevealed(enum TeamTypes,bool)
bool CvPlot::isRiverCrossing(enum DirectionTypes)
bool CvPlot::isRiverCrossingFlowClockwise(enum DirectionTypes)
bool CvPlot::isRoute(void)
bool CvPlot::isVisibleEnemyUnit(enum PlayerTypes)
bool CvPlot::isWater(void)
bool CvPlot::isWOfRiver(void)
class CLLNode<struct IDInfo> * CvPlot::nextUnitNode(class CLLNode<struct IDInfo> *)
void CvPlot::setLayoutDirty(bool)
void CvPlot::setLayoutStateToCurrent(void)
void CvPlot::updateFlagSymbol(void)
CvPlotIndicatorData::CvPlotIndicatorData(struct CvPlotIndicatorData const &)
CvPlotIndicatorData::CvPlotIndicatorData(void)
CvPlotIndicatorData::~CvPlotIndicatorData(void)
void CvPopupInfo::addPythonButton(unsigned short const *,char const *)
CvPopupInfo::CvPopupInfo(enum ButtonPopupTypes,int,int,int,int,bool,bool)
enum ButtonPopupTypes CvPopupInfo::getButtonPopupType(void)
int CvPopupInfo::getData1(void)
int CvPopupInfo::getData2(void)
int CvPopupInfo::getData3(void)
int CvPopupInfo::getFlags(void)
int CvPopupInfo::getNumPythonButtons(void)
class CvString const & CvPopupInfo::getOnClickedPythonCallback(void)
class CvString const & CvPopupInfo::getOnFocusPythonCallback(void)
bool CvPopupInfo::getOption1(void)
bool CvPopupInfo::getOption2(void)
bool CvPopupInfo::getPendingDelete(void)
class CvString const & CvPopupInfo::getPythonButtonArt(int)
class CvWString const & CvPopupInfo::getPythonButtonText(int)
class CvString const & CvPopupInfo::getPythonModule(void)
class CvWString const & CvPopupInfo::getText(void)
class CvPopupInfo const & CvPopupInfo::operator=(class CvPopupInfo const &)
void CvPopupInfo::read(class FDataStreamBase &)
void CvPopupInfo::setButtonPopupType(enum ButtonPopupTypes)
void CvPopupInfo::setData1(int)
void CvPopupInfo::setData2(int)
void CvPopupInfo::setData3(int)
void CvPopupInfo::setFlags(int)
void CvPopupInfo::setOnClickedPythonCallback(char const *)
void CvPopupInfo::setOnFocusPythonCallback(char const *)
void CvPopupInfo::setOption1(bool)
void CvPopupInfo::setOption2(bool)
void CvPopupInfo::setPendingDelete(bool)
void CvPopupInfo::setPythonModule(char const *)
void CvPopupInfo::setText(unsigned short const *)
void CvPopupInfo::write(class FDataStreamBase &)
CvPopupInfo::~CvPopupInfo(void)
CvRandom::CvRandom(void)
unsigned short CvRandom::get(unsigned short,char const *)
float CvRandom::getFloat(void)
void CvRandom::init(unsigned long)
CvRandom::~CvRandom(void)
CvReplayInfo::CvReplayInfo(void)
char const * CvReplayInfo::getModName(void)
bool CvReplayInfo::read(class FDataStreamBase &)
char const * CvRiverModelInfo::getBorderFile(void)
char const * CvRiverModelInfo::getConnectString(void)
char const * CvRiverModelInfo::getDeltaString(void)
char const * CvRiverModelInfo::getModelFile(void)
char const * CvRiverModelInfo::getRotateString(void)
int CvRiverModelInfo::getTextureIndex(void)
char const * CvRouteModelInfo::getConnectString(void)
char const * CvRouteModelInfo::getLateModelFile(void)
char const * CvRouteModelInfo::getModelConnectString(void)
char const * CvRouteModelInfo::getModelFile(void)
char const * CvRouteModelInfo::getRotateString(void)
enum RouteTypes CvRouteModelInfo::getRouteType(void)
bool CvRouteModelInfo::isAnimated(void)
float CvScalableInfo::getScale(void)
bool CvSelectionGroup::addUnit(class CvUnit *,bool)
bool CvSelectionGroup::canDoInterfaceMode(enum InterfaceModeTypes)
bool CvSelectionGroup::canMoveInto(class CvPlot *,bool)
void CvSelectionGroup::clearUnits(void)
class CLLNode<struct IDInfo> * CvSelectionGroup::deleteUnitNode(class CLLNode<struct IDInfo> *)
class CvUnit * CvSelectionGroup::getHeadUnit(void)
int CvSelectionGroup::getNumUnits(void)
int CvSelectionGroup::getUnitIndex(class CvUnit *,int)
class CLLNode<struct MissionData> * CvSelectionGroup::headMissionQueueNode(void)
class CLLNode<struct IDInfo> * CvSelectionGroup::headUnitNode(void)
void CvSelectionGroup::init(int,enum PlayerTypes)
bool CvSelectionGroup::isBusy(void)
class CLLNode<struct MissionData> * CvSelectionGroup::nextMissionQueueNode(class CLLNode<struct MissionData> *)
class CLLNode<struct IDInfo> * CvSelectionGroup::nextUnitNode(class CLLNode<struct IDInfo> *)
void CvSelectionGroup::NotifyEntity(enum MissionTypes)
bool CvSelectionGroup::readyToSelect(bool)
void CvSelectionGroup::reset(int,enum PlayerTypes,bool)
void CvSelectionGroup::uninit(void)
CvSelectionGroupAI::CvSelectionGroupAI(void)
CvSelectionGroupAI::~CvSelectionGroupAI(void)
char const * CvSlideShowRandomInfo::getPath(void)
int CvSpaceShipInfo::getArtType(void)
int CvSpaceShipInfo::getEventCode(void)
char const * CvSpaceShipInfo::getNodeName(void)
int CvSpaceShipInfo::getPartNumber(void)
char const * CvSpaceShipInfo::getProjectName(void)
enum ProjectTypes CvSpaceShipInfo::getProjectType(void)
enum SpaceShipInfoTypes CvSpaceShipInfo::getSpaceShipInfoType(void)
class CvPlayerRecord * CvStatistics::getPlayerRecord(int)
CvTalkingHeadMessage::CvTalkingHeadMessage(int,int,unsigned short const *,char const *,enum InterfaceMessageTypes,char const *,enum ColorTypes,int,int,bool,bool)
unsigned short const * CvTalkingHeadMessage::getDescription(void)
enum ColorTypes CvTalkingHeadMessage::getFlashColor(void)
enum PlayerTypes CvTalkingHeadMessage::getFromPlayer(void)
class CvString const & CvTalkingHeadMessage::getIcon(void)
int CvTalkingHeadMessage::getLength(void)
enum InterfaceMessageTypes CvTalkingHeadMessage::getMessageType(void)
bool CvTalkingHeadMessage::getOffScreenArrows(void)
bool CvTalkingHeadMessage::getOnScreenArrows(void)
class CvString const & CvTalkingHeadMessage::getSound(void)
enum ChatTargetTypes CvTalkingHeadMessage::getTarget(void)
int CvTalkingHeadMessage::getTurn(void)
int CvTalkingHeadMessage::getX(void)
int CvTalkingHeadMessage::getY(void)
void CvTalkingHeadMessage::setFromPlayer(enum PlayerTypes)
void CvTalkingHeadMessage::setLength(int)
void CvTalkingHeadMessage::setShown(bool)
void CvTalkingHeadMessage::setTarget(enum ChatTargetTypes)
CvTalkingHeadMessage::~CvTalkingHeadMessage(void)
bool CvTeam::canDeclareWar(enum TeamTypes)
void CvTeam::getCompletedSpaceshipProjects(class std::map<enum ProjectTypes,int,struct std::less<enum ProjectTypes>,class std::allocator<struct std::pair<enum ProjectTypes const ,int> > > &)
int CvTeam::getNumMembers(void)
int CvTeam::getProjectArtType(enum ProjectTypes,int)
void CvTeam::init(enum TeamTypes)
bool CvTeam::isAtWar(enum TeamTypes)
void CvTeam::reset(enum TeamTypes,bool)
class CvTeamAI & CvTeamAI::getTeamNonInl(enum TeamTypes)
char const * CvTerrainInfo::getArtDefineTag(void)
char const * CvTerrainPlaneInfo::getBaseTexture(void)
float CvTerrainPlaneInfo::getCloseAlpha(void)
enum FogTypes CvTerrainPlaneInfo::getFogType(void)
float CvTerrainPlaneInfo::getMaterialAlpha(void)
float CvTerrainPlaneInfo::getTextureScalingU(void)
float CvTerrainPlaneInfo::getTextureScalingV(void)
float CvTerrainPlaneInfo::getTextureScrollRateU(void)
float CvTerrainPlaneInfo::getTextureScrollRateV(void)
float CvTerrainPlaneInfo::getZHeight(void)
bool CvTerrainPlaneInfo::isGroundPlane(void)
bool CvTerrainPlaneInfo::isVisible(void)
char const * CvThroneRoomCamera::getFileName(void)
int CvThroneRoomInfo::getAnimation(void)
char const * CvThroneRoomInfo::getEvent(void)
int CvThroneRoomInfo::getFromState(void)
char const * CvThroneRoomInfo::getNodeName(void)
int CvThroneRoomInfo::getToState(void)
char const * CvThroneRoomStyleInfo::getArtStyleType(void)
char const * CvThroneRoomStyleInfo::getEraType(void)
char const * CvThroneRoomStyleInfo::getFileName(void)
bool CvUnit::canMove(void)
void CvUnit::cheat(bool,bool,bool)
float CvUnit::getAnimationMaxSpeed(void)
float CvUnit::getAnimationPadTime(void)
enum BuildTypes CvUnit::getBuildType(void)
char const * CvUnit::getButton(void)
int CvUnit::getCombatTimer(void)
class CvUnit * CvUnit::getCombatUnit(void)
int CvUnit::getDamage(void)
enum DomainTypes CvUnit::getDomainType(void)
enum DirectionTypes CvUnit::getFacingDirection(bool)
char const * CvUnit::getFormationType(void)
class CvSelectionGroup * CvUnit::getGroup(void)
int CvUnit::getHotKeyNumber(void)
int CvUnit::getID(void)
struct IDInfo CvUnit::getIDInfo(void)
void CvUnit::getLayerAnimationPaths(class std::vector<enum AnimationPathTypes,class std::allocator<enum AnimationPathTypes> > &)
enum UnitTypes const CvUnit::getLeaderUnitType(void)
class CvWString const CvUnit::getName(unsigned int)
enum PlayerTypes CvUnit::getOwner(void)
int CvUnit::getSelectionSoundScript(void)
int CvUnit::getSubUnitsAlive(void)
enum TeamTypes CvUnit::getTeam(void)
enum UnitTypes const CvUnit::getUnitType(void)
int CvUnit::getX(void)
int CvUnit::getY(void)
bool CvUnit::hasMoved(void)
bool CvUnit::isDead(void)
bool CvUnit::isInfoBarDirty(void)
bool CvUnit::isInvisible(enum TeamTypes,bool,bool)
bool CvUnit::isRanged(void)
bool CvUnit::isWaiting(void)
int CvUnit::maxHitPoints(void)
class CvPlot * CvUnit::plot(void)
void CvUnit::setInfoBarDirty(bool)
bool CvUnit::shouldShowEnemyGlow(enum TeamTypes)
bool CvUnit::shouldShowFoundBorders(void)
void CvUnitFormationInfo::addUnitEntry(class CvUnitEntry const &)
CvUnitFormationInfo::CvUnitFormationInfo(void)
class std::vector<enum EntityEventTypes,class std::allocator<enum EntityEventTypes> > const & CvUnitFormationInfo::getEventTypes(void)
char const * CvUnitFormationInfo::getFormationType(void)
class CvUnitEntry const & CvUnitFormationInfo::getGreatUnitEntry(int)
int CvUnitFormationInfo::getNumUnitEntries(void)
class CvUnitEntry const & CvUnitFormationInfo::getSiegeUnitEntry(int)
class CvUnitEntry const & CvUnitFormationInfo::getUnitEntry(int)
bool CvVictoryInfo::isPermanent(void)
char const * CvWaterPlaneInfo::getBaseTexture(void)
float CvWaterPlaneInfo::getMaterialAlpha(void)
float CvWaterPlaneInfo::getTextureScaling(void)
float CvWaterPlaneInfo::getTextureScrollRateU(void)
float CvWaterPlaneInfo::getTextureScrollRateV(void)
char const * CvWaterPlaneInfo::getTransitionTexture(void)
CvWBData::~CvWBData(void)
int CvWorldInfo::getDefaultPlayers(void)
char const * CvWorldPickerInfo::getClimatePath(int)
char const * CvWorldPickerInfo::getMapName(void)
char const * CvWorldPickerInfo::getModelFile(void)
int CvWorldPickerInfo::getNumClimates(void)
int CvWorldPickerInfo::getNumSizes(void)
int CvWorldPickerInfo::getNumWaterLevelDecals(void)
int CvWorldPickerInfo::getNumWaterLevelGloss(void)
float CvWorldPickerInfo::getSize(int)
char const * CvWorldPickerInfo::getWaterLevelDecalPath(int)
char const * CvWorldPickerInfo::getWaterLevelGlossPath(int)
void CvXMLLoadUtility::CleanUpGlobalVariables(void)
CvXMLLoadUtility::CvXMLLoadUtility(void)
bool CvXMLLoadUtility::LoadBasicInfos(void)
bool CvXMLLoadUtility::LoadGlobalText(void)
bool CvXMLLoadUtility::LoadGraphicOptions(void)
bool CvXMLLoadUtility::LoadPlayerOptions(void)
bool CvXMLLoadUtility::LoadPostMenuGlobals(void)
bool CvXMLLoadUtility::LoadPreMenuGlobals(void)
void CvXMLLoadUtility::ResetGlobalEffectInfo(void)
void CvXMLLoadUtility::ResetLandscapeInfo(void)
bool CvXMLLoadUtility::SetGlobalArtDefines(void)
bool CvXMLLoadUtility::SetGlobalDefines(void)
bool CvXMLLoadUtility::SetGlobalTypes(void)
bool CvXMLLoadUtility::SetPostGlobalsGlobalDefines(void)
bool CvXMLLoadUtility::SetupGlobalLandscapeInfo(void)
CvXMLLoadUtility::~CvXMLLoadUtility(void)
void CyArgsList::add(int)
void CyArgsList::add(char const *)
void CyArgsList::add(char const *,int)
void CyArgsList::add(unsigned short const *)
void CyArgsList::add(void *)
void CyArgsList::add(float)
void * CyArgsList::makeFunctionArgs(void)
CyCity::CyCity(class CvCity *)
CyPlot::CyPlot(class CvPlot *)
class NiPoint3 CyPlot::getPoint(void)
CyUnit::CyUnit(class CvUnit *)
float directionAngle(enum DirectionTypes)
void DLLPublishToPython(void)
enum DirectionTypes estimateDirection(class CvPlot const *,class CvPlot const *)
class CvCity * getCity(struct IDInfo)
class CvUnit * getUnit(struct IDInfo)
PBGameSetupData::PBGameSetupData(void)
PBGameSetupData::PBGameSetupData(struct PBGameSetupData const &)
PBGameSetupData::~PBGameSetupData(void)
PBPlayerAdminData::PBPlayerAdminData(struct PBPlayerAdminData const &)
PBPlayerAdminData::PBPlayerAdminData(void)
PBPlayerAdminData::~PBPlayerAdminData(void)
PBPlayerSetupData::PBPlayerSetupData(struct PBPlayerSetupData const &)
PBPlayerSetupData::PBPlayerSetupData(void)
PBPlayerSetupData::~PBPlayerSetupData(void)
class PopupReturn & PopupReturn::operator=(class PopupReturn const &)
void PopupReturn::read(class FDataStreamBase *)
void PopupReturn::write(class FDataStreamBase *)
void setTradeItem(struct TradeData *,enum TradeableItems,int)
int * shuffle(int,class CvRandom &)
